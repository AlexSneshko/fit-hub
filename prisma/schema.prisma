generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ProfileType {
  USER
  GYM
}

model User {
  id        String    @id
  username  String    @unique
  name      String?
  surname   String?
  birthDate DateTime?
  isTrainer Boolean   @default(false)
  imageUrl  String?

  exercises       Exercise[]
  trainings       Training[]
  sharedTrainings SharedTraining[]
  posts           Post[]
  comments        Comment[]
  client          GymClient?
  trainer         Trainer?
  trainers        TrainerClientRelationship[]
  subscribtions   Subscription[]
  subscribers     Subscription[]              @relation("UserSubscribers")
  likedPosts      Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id               String  @id @default(uuid())
  title            String
  description      String  @db.Text()
  duration         String?
  restTime         String?
  weight           Float?
  approachesNumber Int?
  repetitionNumber Int?
  userId           String
  categoryId       String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  exerciseProgresses ExerciseProgress[]
  trainings          ExerciseInTraining[]

  @@index([userId])
  @@index([categoryId])
}

model ExerciseProgress {
  id         String @id @default(uuid())
  exerciseId String

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  exerciseRepetitionDetails ExerciseRepetitionDetails[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([exerciseId])
}

model ExerciseRepetitionDetails {
  id                 String    @id @default(uuid())
  approachesNumber   Int
  repetitoinNumber   Int
  weight             Float?
  duration           DateTime? @db.Time()
  exerciseProgressId String

  exerciseProgress ExerciseProgress @relation(fields: [exerciseProgressId], references: [id])

  @@index([exerciseProgressId])
}

model Training {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?   @db.Text
  isPublic    Boolean   @default(false)
  categoryId  String?
  restTime    DateTime? @db.Time
  duration    DateTime? @db.Time

  // category Category? @relation(fields: [categoryId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  sharedTraining SharedTraining?
  exercises      ExerciseInTraining[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model ExerciseInTraining {
  exerciseId String
  trainingId String
  order      Int

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  training Training @relation(fields: [trainingId], references: [id])

  @@id([exerciseId, trainingId])
  @@index([trainingId])
}

model Category {
  id   String @id @default(uuid())
  name String

  exercises Exercise[]
  // trainings Training[]
}

model SharedTraining {
  id         String @id @default(uuid())
  userId     String
  trainingId String @unique

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id           String      @id @default(uuid())
  authorType   ProfileType
  title        String
  content      Json?
  authorUserId String?
  authorGymId  String?

  authorUser User? @relation(fields: [authorUserId], references: [id], onDelete: Cascade)
  authorGym  Gym?  @relation(fields: [authorGymId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorUserId])
  @@index([authorGymId])
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Comment {
  id          String @id @default(uuid())
  authorId    String
  postId      String
  content     String
  likesAmount Int    @default(0)

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([authorId])
  @@index([postId])
}

model GymClient {
  id     String @id @default(uuid())
  userId String @unique
  gymId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym  Gym  @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([gymId])
}

model Trainer {
  id     String @id @default(uuid())
  userId String @unique
  gymId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym  Gym  @relation(fields: [gymId], references: [id], onDelete: Cascade)

  clients TrainerClientRelationship[]

  createdAt DateTime @default(now())

  @@index([gymId])
}

model TrainerClientRelationship {
  trainerId String
  clientId  String

  trainer Trainer @relation(fields: [trainerId], references: [id])
  client  User    @relation(fields: [clientId], references: [id])

  @@id([trainerId, clientId])
  @@index([clientId])
}

model Gym {
  id       String @id @default(uuid())
  name     String
  location String

  trainers       Trainer[]
  clents         GymClient[]
  subscribers    Subscription[]
  gymOpenTime    GymOpenTime?
  posts          Post[]
  gymMemberships GymMembership[]
  promotions     Promotion[]
  equipment      Equipment[]
  staff          Staff[]

  createdAt DateTime @default(now())
}

model Subscription {
  id               String      @id @default(uuid())
  subscriberId     String
  targetUserId     String?
  targerGymId      String?
  subscribtionType ProfileType

  subscriber User  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  targetUser User? @relation("UserSubscribers", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetGym  Gym?  @relation(fields: [targerGymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([subscriberId, targetUserId, targerGymId])
  @@index([targetUserId])
  @@index([targerGymId])
}

model GymOpenTime {
  id            String   @id @default(uuid())
  gymId         String   @unique
  weekDayOpen   DateTime @db.Time()
  weekDayClose  DateTime @db.Time()
  saturdayOpen  DateTime @db.Time()
  saturdayClose DateTime @db.Time()
  sundayOpen    DateTime @db.Time()
  sundayClose   DateTime @db.Time()

  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model GymMembership {
  id          String @id @default(uuid())
  gymId       String @unique
  name        String
  price       Float
  description String

  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Promotion {
  id        String   @id @default(uuid())
  gymId     String   @unique
  name      String
  firstDate DateTime
  lastDate  DateTime
  content   Json?

  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Staff {
  id          String  @id @default(uuid())
  name        String
  role        String
  image       String
  description String? @db.Text
  gymId       String

  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gymId])
}

model Equipment {
  id      String  @id @default(uuid())
  name    String
  image   String?
  content Json?
  gymId   String

  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gymId])
}
